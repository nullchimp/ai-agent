# .github/workflows/deploy-memgraph-aks.yml
name: Deploy Memgraph on AKS

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

permissions:
  id-token: write          # OIDC login
  contents:  read

env:
  ############################################################
  # Azure authentication (set these three as repo secrets)
  ############################################################
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID:        ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID:        ${{ secrets.AZURE_CLIENT_ID }}

  DB_USERNAME:        ${{ secrets.MEMGRAPH_USERNAME }}
  DB_PASSWORD:        ${{ secrets.MEMGRAPH_PASSWORD }}

  ############################################################
  # Stack parameters
  ############################################################
  ENVIRONMENT:  dev
  LOCATION: germanywestcentral
  NODE_VM_SIZE: Standard_B2ms

  ############################################################
  # Location of your *.tf files (change only this line
  # if you move Terraform to another folder)
  ############################################################
  TF_DIR: infra/azure
  RESOURCE_GROUP: "ai-agent"
  AKS_NAME: aks-memgraph

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }

    steps:
    #─────────────────────────── repo ───────────────────────────
    - uses: actions/checkout@v4

    #────────────────── Azure login (OIDC) ──────────────────────
    - name: Azure login
      uses: azure/login@v2
      with:
        client-id:        ${{ env.ARM_CLIENT_ID }}
        tenant-id:        ${{ env.ARM_TENANT_ID }}
        subscription-id:  ${{ env.ARM_SUBSCRIPTION_ID }}
        auth-type: SERVICE_PRINCIPAL
        audience: api://AzureADTokenExchange

    #────────────────────── Terraform init ──────────────────────
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform init
      env: { TF_IN_AUTOMATION: true }
      run: |
        terraform -chdir="$TF_DIR" init -input=false -no-color

    #─────────── Import EVERY pre-existing resource ─────────────
    - name: Import Azure resources already present
      env: { TF_IN_AUTOMATION: true }
      run: |
        set -euo pipefail
        echo "::group::terraform import"

        RG_NAME="${{env.RESOURCE_GROUP}}-${{ env.ENVIRONMENT }}"
        AKS_NAME="${{env.AKS_NAME}}-${{ env.ENVIRONMENT }}"

        ### 1) Resource-group (special-case test) ###############
        if az group exists --name "$RG_NAME" | grep -q true; then
          terraform -chdir="$TF_DIR" import -no-color -input=false \
            -var="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" \
            -var="location=${{env.LOCATION}}" \
            -var="resource_group=${{ env.RESOURCE_GROUP }}-${{ env.ENVIRONMENT }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="node_vm_size=${{ env.NODE_VM_SIZE }}" \
            azurerm_resource_group.this \
            "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}"
        else
          echo "RG $RG_NAME will be created by Terraform."
        fi

        ### 2) Generic map – add new rows when you add resources
        declare -A MAP

        # AKS cluster
        MAP[azurerm_kubernetes_cluster.this]="/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.ContainerService/managedClusters/${AKS_NAME}"

        # ── Example for future resources (uncomment / adapt) ──
        # MAP[azurerm_key_vault.this]="\
        # /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/kv-ai-agent"
        # MAP[azurerm_container_registry.this]="\
        # /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.ContainerRegistry/registries/craiagentreg"

        ### Attempt imports; skip if object truly absent ########
        for TF_ADDR in "${!MAP[@]}"; do
          AZ_ID="${MAP[$TF_ADDR]}"
          if az resource show --ids "$AZ_ID" --query "id" -o tsv &>/dev/null; then
            echo "Importing $TF_ADDR"
            terraform -chdir="$TF_DIR" import -no-color -input=false \
              -var="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" \
              -var="location=${{env.LOCATION}}" \
              -var="resource_group=${{ env.RESOURCE_GROUP }}-${{ env.ENVIRONMENT }}" \
              -var="environment=${{ env.ENVIRONMENT }}" \
              -var="node_vm_size=${{ env.NODE_VM_SIZE }}" \
              "$TF_ADDR" "$AZ_ID"
          else
            echo "Azure object not found → $AZ_ID (skipping)"
          fi
        done

        echo "::endgroup::"

    #────────────────────── Terraform apply ────────────────────
    - name: Terraform apply
      env: { TF_IN_AUTOMATION: true }
      run: |
        terraform -chdir="$TF_DIR" apply -auto-approve -input=false -no-color \
          -var="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" \
          -var="location=${{env.LOCATION}}" \
          -var="resource_group=${{ env.RESOURCE_GROUP }}-${{ env.ENVIRONMENT }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="node_vm_size=${{ env.NODE_VM_SIZE }}"

    #─────────────── Get AKS kubeconfig (always) ────────────────
    - name: Pull cluster credentials
      run: |
        az aks get-credentials \
          --resource-group "${{env.RESOURCE_GROUP}}-${{ env.ENVIRONMENT }}" \
          --name          "${{env.AKS_NAME}}-${{ env.ENVIRONMENT }}" \
          --overwrite-existing

    #────────── Secret (username / password) in K8s ────────────
    - name: Build credentials hash
      id: hash
      run: |
        echo "value=$(echo -n '${{ env.DB_USERNAME }}${{ env.DB_PASSWORD }}' | sha256sum | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"

    - name: Create or update memgraph-credentials secret
      env:
        MEMGRAPH_USERNAME: ${{ env.DB_USERNAME }}
        MEMGRAPH_PASSWORD: ${{ env.DB_PASSWORD }}
      run: |
        kubectl create secret generic memgraph-credentials \
          --from-literal=username="$MEMGRAPH_USERNAME" \
          --from-literal=password="$MEMGRAPH_PASSWORD" \
          --dry-run=client -o yaml | kubectl apply -f -

    #──────────── StorageClass & Kubernetes manifests ───────────
    - name: Apply StorageClass (Standard SSD)
      run: kubectl apply -f infra/k8s/storageclass.yaml

    - name: Apply Memgraph Deployment & Service
      env:
        CREDENTIALS_HASH: ${{ steps.hash.outputs.value }}
        ENVIRONMENT:      ${{ env.ENVIRONMENT }}
      run: |
        envsubst < infra/k8s/memgraph.yaml | kubectl apply -f -

    #─────────────── Verify Memgraph connectivity ─────────────────
    - name: Set up Python for Memgraph verification
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies for Memgraph verification
      run: |
        python -m pip install --upgrade pip
        pip install python-dotenv mgclient

    - name: Export Memgraph connection details
      run: |
        # Get service IP
        MEMGRAPH_IP=$(kubectl get service memgraph -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "MEMGRAPH_URI=$MEMGRAPH_IP" >> $GITHUB_ENV
        echo "MEMGRAPH_PORT=7687" >> $GITHUB_ENV
        echo "MEMGRAPH_USERNAME=${{ env.DB_USERNAME }}" >> $GITHUB_ENV
        echo "MEMGRAPH_PASSWORD=${{ env.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "Memgraph connection details exported: $MEMGRAPH_IP:7687"

    - name: Verify Memgraph connection and authentication
      run: |
        echo "Verifying Memgraph connection and authentication..."
        python scripts/verify_memgraph_connection.py
