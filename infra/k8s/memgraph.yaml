################################################################
#  Memgraph - Optimized deployment matching docker-compose.yml
#  ▸ Uses memgraph-mage image like docker-compose
#  ▸ Authentication enforced via MEMGRAPH_USER/MEMGRAPH_PASSWORD  
#  ▸ Minimal cost configuration with persistent storage
#  ▸ External LoadBalancer access
################################################################

###############################################################
#  Deployment
###############################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memgraph
  labels:
    app: memgraph
spec:
  replicas: 1
  selector:
    matchLabels: { app: memgraph }
  template:
    metadata:
      labels: { app: memgraph }
      annotations:
        credentials-hash: "${CREDENTIALS_HASH}"
    spec:
      securityContext:
        fsGroup: 1000

      containers:
      - name: memgraph
        # Use memgraph-mage like in docker-compose
        image: memgraph/memgraph-mage:latest
        
        # Match docker-compose command exactly
        command: ["--log-level=TRACE", "--also-log-to-stderr"]
        
        ports:
        - { name: bolt, containerPort: 7687 }
        - { name: http, containerPort: 7444 }
        - { name: ui, containerPort: 3000 }

        # Environment variables matching docker-compose exactly
        env:
        - name: MEMGRAPH_USER
          valueFrom: { secretKeyRef: { name: memgraph-credentials, key: username } }
        - name: MEMGRAPH_PASSWORD
          valueFrom: { secretKeyRef: { name: memgraph-credentials, key: password } }

        # Persistent storage matching docker-compose volumes
        volumeMounts:
        - { name: data, mountPath: /data }
        - { name: logs, mountPath: /var/log/memgraph }
        - { name: conf, mountPath: /etc/memgraph }

        # Minimal resource limits for cost optimization
        resources:
          requests: { cpu: "100m", memory: "256Mi" }
          limits:   { cpu: "500m", memory: "1Gi" }

        # Health checks matching docker-compose
        livenessProbe:
          httpGet:
            path: /api/v1/storage/status
            port: 7444
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10

        readinessProbe:
          httpGet:
            path: /api/v1/storage/status  
            port: 7444
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5

      volumes:
      - { name: data, persistentVolumeClaim: { claimName: memgraph-data } }
      - { name: logs, persistentVolumeClaim: { claimName: memgraph-logs } }
      - { name: conf, persistentVolumeClaim: { claimName: memgraph-conf } }
---
###############################################################
#  Persistent Volume Claims - Cost-optimized Standard SSD
###############################################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: memgraph-data
spec:
  storageClassName: disk-ssd
  accessModes: [ ReadWriteOnce ]
  resources: { requests: { storage: 8Gi } }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: memgraph-logs
spec:
  storageClassName: disk-ssd
  accessModes: [ ReadWriteOnce ]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: memgraph-conf
spec:
  storageClassName: disk-ssd
  accessModes: [ ReadWriteOnce ]
  resources: { requests: { storage: 1Gi } }
---
###############################################################
#  Service – External LoadBalancer for public access
###############################################################
apiVersion: v1
kind: Service
metadata:
  name: memgraph
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: "memgraph-aiagent-${ENVIRONMENT}"
spec:
  selector: { app: memgraph }
  type: LoadBalancer
  ports:
  - { name: bolt, port: 7687, targetPort: 7687, protocol: TCP }
  - { name: http, port: 7444, targetPort: 7444, protocol: TCP }
  - { name: ui,   port: 3000, targetPort: 3000, protocol: TCP }

